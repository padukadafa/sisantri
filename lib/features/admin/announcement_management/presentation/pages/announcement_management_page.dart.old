import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

import 'package:sisantri/core/theme/app_theme.dart';
import 'package:sisantri/shared/helpers/messaging_helper.dart';
import 'package:sisantri/features/shared/pengumuman/data/models/pengumuman_model.dart';
import '../providers/announcement_providers.dart';

/// Halaman manajemen pengumuman
class AnnouncementManagementPage extends ConsumerStatefulWidget {
  const AnnouncementManagementPage({super.key});

  @override
  ConsumerState<AnnouncementManagementPage> createState() =>
      _AnnouncementManagementPageState();
}

class _AnnouncementManagementPageState
    extends ConsumerState<AnnouncementManagementPage> {
  String _selectedFilter = 'semua';
  String _searchQuery = '';
  final TextEditingController _searchController = TextEditingController();

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final pengumumanAsync = ref.watch(pengumumanProvider);
    final stats = ref.watch(pengumumanStatsProvider);

    return Scaffold(
      appBar: AppBar(
        title: const Text('Manajemen Pengumuman'),
        actions: [
          IconButton(
            icon: const Icon(Icons.add),
            onPressed: () => _showAddEditDialog(context, ref),
          ),
        ],
      ),
      body: Column(
        children: [
          // Statistics Row
          Container(
            padding: const EdgeInsets.all(16),
            color: Colors.grey[50],
            child: Row(
              children: [
                Expanded(
                  child: _buildStatCard('Total', stats['total']!, Colors.blue),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: _buildStatCard(
                    'Aktif',
                    stats['active']!,
                    Colors.green,
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: _buildStatCard(
                    'Kadaluarsa',
                    stats['expired']!,
                    Colors.orange,
                  ),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: _buildStatCard('Draft', stats['draft']!, Colors.grey),
                ),
              ],
            ),
          ),

          // Search and Filter
          Container(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                TextField(
                  controller: _searchController,
                  decoration: InputDecoration(
                    hintText: 'Cari pengumuman...',
                    prefixIcon: const Icon(Icons.search),
                    suffixIcon: _searchQuery.isNotEmpty
                        ? IconButton(
                            icon: const Icon(Icons.clear),
                            onPressed: () {
                              setState(() {
                                _searchController.clear();
                                _searchQuery = '';
                              });
                            },
                          )
                        : null,
                    border: OutlineInputBorder(
                      borderRadius: BorderRadius.circular(12),
                    ),
                  ),
                  onChanged: (value) {
                    setState(() {
                      _searchQuery = value.toLowerCase();
                    });
                  },
                ),
                const SizedBox(height: 12),

                SingleChildScrollView(
                  scrollDirection: Axis.horizontal,
                  child: Row(
                    children: [
                      _buildFilterChip('semua', 'Semua'),
                      _buildFilterChip('aktif', 'Aktif'),
                      _buildFilterChip('expired', 'Kadaluarsa'),
                      _buildFilterChip('draft', 'Draft'),
                      _buildFilterChip('penting', 'Penting'),
                      _buildFilterChip('urgent', 'Urgent'),
                    ],
                  ),
                ),
              ],
            ),
          ),

          // PengumumanModel List
          Expanded(
            child: pengumumanAsync.when(
              loading: () => const Center(child: CircularProgressIndicator()),
              error: (error, stack) => Center(
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  children: [
                    const Icon(
                      Icons.error_outline,
                      size: 64,
                      color: Colors.red,
                    ),
                    const SizedBox(height: 16),
                    Text('Error: $error'),
                    const SizedBox(height: 16),
                    ElevatedButton(
                      onPressed: () => ref.invalidate(pengumumanProvider),
                      child: const Text('Coba Lagi'),
                    ),
                  ],
                ),
              ),
              data: (pengumumanList) => _buildPengumumanList(pengumumanList),
            ),
          ),
        ],
      ),
      floatingActionButton: FloatingActionButton(
        onPressed: () => _showAddEditDialog(context, ref),
        backgroundColor: AppTheme.primaryColor,
        child: const Icon(Icons.add, color: Colors.white),
      ),
    );
  }

  Widget _buildStatCard(String label, int value, Color color) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Column(
        children: [
          Text(
            '$value',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
          Text(label, style: TextStyle(fontSize: 12, color: color)),
        ],
      ),
    );
  }

  Widget _buildFilterChip(String value, String label) {
    final isSelected = _selectedFilter == value;
    return Padding(
      padding: const EdgeInsets.only(right: 8),
      child: FilterChip(
        label: Text(label),
        selected: isSelected,
        onSelected: (selected) {
          setState(() {
            _selectedFilter = selected ? value : 'semua';
          });
        },
        selectedColor: AppTheme.primaryColor.withOpacity(0.2),
        checkmarkColor: AppTheme.primaryColor,
      ),
    );
  }

  Widget _buildPengumumanList(List<PengumumanModel> pengumumanList) {
    // Apply filters
    final filteredList = pengumumanList.where((pengumuman) {
      // Search filter
      if (_searchQuery.isNotEmpty) {
        final matchesSearch =
            pengumuman.judul.toLowerCase().contains(_searchQuery) ||
            pengumuman.konten.toLowerCase().contains(_searchQuery);
        if (!matchesSearch) return false;
      }

      // Status filter
      switch (_selectedFilter) {
        case 'aktif':
          return pengumuman.isActive && !pengumuman.isExpired;
        case 'expired':
          return pengumuman.isExpired;
        case 'draft':
          return !pengumuman.isActive;
        case 'penting':
          return pengumuman.prioritas == 'penting';
        case 'urgent':
          return pengumuman.prioritas == 'urgent';
        default:
          return true;
      }
    }).toList();

    if (filteredList.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.campaign, size: 64, color: Colors.grey[400]),
            const SizedBox(height: 16),
            Text(
              _searchQuery.isNotEmpty
                  ? 'Tidak ada pengumuman yang sesuai'
                  : 'Belum ada pengumuman',
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(height: 16),
            ElevatedButton.icon(
              onPressed: () => _showAddEditDialog(context, ref),
              icon: const Icon(Icons.add),
              label: const Text('Buat Pengumuman'),
              style: ElevatedButton.styleFrom(
                backgroundColor: AppTheme.primaryColor,
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      );
    }

    return ListView.builder(
      padding: const EdgeInsets.all(16),
      itemCount: filteredList.length,
      itemBuilder: (context, index) {
        final pengumuman = filteredList[index];
        return _buildPengumumanCard(pengumuman);
      },
    );
  }

  Widget _buildPengumumanCard(PengumumanModel pengumuman) {
    final prioritasColor = _getPrioritasColor(pengumuman.prioritas);
    final kategoriColor = _getKategoriColor(pengumuman.kategori);

    return Card(
      margin: const EdgeInsets.only(bottom: 12),
      elevation: 2,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: InkWell(
        onTap: () => _showDetailDialog(context, pengumuman),
        borderRadius: BorderRadius.circular(12),
        child: Padding(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: prioritasColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(6),
                      border: Border.all(
                        color: prioritasColor.withOpacity(0.3),
                      ),
                    ),
                    child: Text(
                      pengumuman.prioritas.toUpperCase(),
                      style: TextStyle(
                        color: prioritasColor,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const SizedBox(width: 8),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 8,
                      vertical: 4,
                    ),
                    decoration: BoxDecoration(
                      color: kategoriColor.withOpacity(0.1),
                      borderRadius: BorderRadius.circular(6),
                      border: Border.all(color: kategoriColor.withOpacity(0.3)),
                    ),
                    child: Text(
                      pengumuman.kategori.toUpperCase(),
                      style: TextStyle(
                        color: kategoriColor,
                        fontSize: 10,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                  ),
                  const Spacer(),
                  if (pengumuman.isExpired)
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.red.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Text(
                        'EXPIRED',
                        style: TextStyle(
                          color: Colors.red,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  if (!pengumuman.isActive)
                    Container(
                      padding: const EdgeInsets.symmetric(
                        horizontal: 8,
                        vertical: 4,
                      ),
                      decoration: BoxDecoration(
                        color: Colors.grey.withOpacity(0.1),
                        borderRadius: BorderRadius.circular(6),
                      ),
                      child: const Text(
                        'DRAFT',
                        style: TextStyle(
                          color: Colors.grey,
                          fontSize: 10,
                          fontWeight: FontWeight.bold,
                        ),
                      ),
                    ),
                  PopupMenuButton<String>(
                    onSelected: (value) {
                      switch (value) {
                        case 'edit':
                          _showAddEditDialog(
                            context,
                            ref,
                            pengumuman: pengumuman,
                          );
                          break;
                        case 'duplicate':
                          _duplicatePengumuman(ref, pengumuman);
                          break;
                        case 'toggle':
                          _toggleActiveStatus(ref, pengumuman);
                          break;
                        case 'resend':
                          _resendNotification(pengumuman);
                          break;
                        case 'delete':
                          _deletePengumuman(context, ref, pengumuman);
                          break;
                      }
                    },
                    itemBuilder: (context) => [
                      const PopupMenuItem(
                        value: 'edit',
                        child: Row(
                          children: [
                            Icon(Icons.edit, size: 16),
                            SizedBox(width: 8),
                            Text('Edit'),
                          ],
                        ),
                      ),
                      const PopupMenuItem(
                        value: 'duplicate',
                        child: Row(
                          children: [
                            Icon(Icons.copy, size: 16),
                            SizedBox(width: 8),
                            Text('Duplikasi'),
                          ],
                        ),
                      ),
                      PopupMenuItem(
                        value: 'toggle',
                        child: Row(
                          children: [
                            Icon(
                              pengumuman.isActive
                                  ? Icons.visibility_off
                                  : Icons.visibility,
                              size: 16,
                            ),
                            const SizedBox(width: 8),
                            Text(
                              pengumuman.isActive ? 'Nonaktifkan' : 'Aktifkan',
                            ),
                          ],
                        ),
                      ),
                      if (pengumuman.isActive)
                        const PopupMenuItem(
                          value: 'resend',
                          child: Row(
                            children: [
                              Icon(Icons.send, size: 16),
                              SizedBox(width: 8),
                              Text('Kirim Ulang'),
                            ],
                          ),
                        ),
                      const PopupMenuItem(
                        value: 'delete',
                        child: Row(
                          children: [
                            Icon(Icons.delete, size: 16, color: Colors.red),
                            SizedBox(width: 8),
                            Text('Hapus', style: TextStyle(color: Colors.red)),
                          ],
                        ),
                      ),
                    ],
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Text(
                pengumuman.judul,
                style: const TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
                maxLines: 2,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 8),
              Text(
                pengumuman.konten,
                style: TextStyle(color: Colors.grey[600], fontSize: 14),
                maxLines: 3,
                overflow: TextOverflow.ellipsis,
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  Icon(Icons.person, size: 16, color: Colors.grey[600]),
                  const SizedBox(width: 4),
                  Text(
                    pengumuman.authorName,
                    style: TextStyle(color: Colors.grey[600], fontSize: 12),
                  ),
                  const SizedBox(width: 16),
                  Icon(Icons.schedule, size: 16, color: Colors.grey[600]),
                  const SizedBox(width: 4),
                  Text(
                    _formatDateTime(pengumuman.tanggalPost),
                    style: TextStyle(color: Colors.grey[600], fontSize: 12),
                  ),
                  const Spacer(),
                  Icon(Icons.visibility, size: 16, color: Colors.grey[600]),
                  const SizedBox(width: 4),
                  Text(
                    '${pengumuman.viewCount}',
                    style: TextStyle(color: Colors.grey[600], fontSize: 12),
                  ),
                ],
              ),
              if (pengumuman.targetAudience.isNotEmpty &&
                  !pengumuman.targetAudience.contains('semua')) ...[
                const SizedBox(height: 8),
                Wrap(
                  spacing: 4,
                  children: pengumuman.targetAudience.map((audience) {
                    return Chip(
                      label: Text(audience),
                      backgroundColor: Colors.blue.withOpacity(0.1),
                      labelStyle: const TextStyle(fontSize: 10),
                      materialTapTargetSize: MaterialTapTargetSize.shrinkWrap,
                    );
                  }).toList(),
                ),
              ],
            ],
          ),
        ),
      ),
    );
  }

  Color _getPrioritasColor(String prioritas) {
    switch (prioritas.toLowerCase()) {
      case 'urgent':
        return Colors.red;
      case 'penting':
        return Colors.orange;
      default:
        return Colors.blue;
    }
  }

  Color _getKategoriColor(String kategori) {
    switch (kategori.toLowerCase()) {
      case 'pengumuman':
        return Colors.blue;
      case 'acara':
        return Colors.green;
      case 'peraturan':
        return Colors.red;
      case 'akademik':
        return Colors.purple;
      default:
        return Colors.grey;
    }
  }

  String _formatDateTime(DateTime dateTime) {
    final now = DateTime.now();
    final difference = now.difference(dateTime);

    if (difference.inDays > 0) {
      return '${difference.inDays} hari lalu';
    } else if (difference.inHours > 0) {
      return '${difference.inHours} jam lalu';
    } else if (difference.inMinutes > 0) {
      return '${difference.inMinutes} menit lalu';
    } else {
      return 'Baru saja';
    }
  }

  void _showAddEditDialog(
    BuildContext context,
    WidgetRef ref, {
    Pengumuman? pengumuman,
  }) {
    showDialog(
      context: context,
      builder: (context) => _PengumumanFormDialog(
        pengumuman: pengumuman,
        onSave: (newPengumuman) {
          if (pengumuman == null) {
            _addPengumuman(ref, newPengumuman);
          } else {
            _updatePengumuman(ref, pengumuman.id, newPengumuman);
          }
        },
      ),
    );
  }

  void _showDetailDialog(BuildContext context, PengumumanModel pengumuman) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text(pengumuman.judul),
        content: SizedBox(
          width: MediaQuery.of(context).size.width * 0.8,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(pengumuman.konten),
                const SizedBox(height: 16),
                Row(
                  children: [
                    const Text(
                      'Kategori: ',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(pengumuman.kategori),
                  ],
                ),
                Row(
                  children: [
                    const Text(
                      'Prioritas: ',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(pengumuman.prioritas),
                  ],
                ),
                Row(
                  children: [
                    const Text(
                      'Target: ',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(pengumuman.targetAudience.join(', ')),
                  ],
                ),
                Row(
                  children: [
                    const Text(
                      'Dibuat: ',
                      style: TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(_formatDateTime(pengumuman.tanggalPost)),
                  ],
                ),
                if (pengumuman.tanggalExpired != null)
                  Row(
                    children: [
                      const Text(
                        'Berakhir: ',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      Text(_formatDateTime(pengumuman.tanggalExpired!)),
                    ],
                  ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Tutup'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _showAddEditDialog(context, ref, pengumuman: pengumuman);
            },
            child: const Text('Edit'),
          ),
        ],
      ),
    );
  }

  Future<void> _addPengumuman(WidgetRef ref, PengumumanModel pengumuman) async {
    try {
      await FirebaseFirestore.instance
          .collection('pengumuman')
          .add(pengumuman.toJson());

      // Send notification if active
      if (pengumuman.isActive) {
        await _sendPengumumanNotification(pengumuman);
      }
    } catch (e) {
      // Error adding pengumuman
    }
  }

  Future<void> _updatePengumuman(
    WidgetRef ref,
    String id,
    PengumumanModel pengumuman,
  ) async {
    try {
      await FirebaseFirestore.instance
          .collection('pengumuman')
          .doc(id)
          .update(pengumuman.toJson());
    } catch (e) {
      // Error updating pengumuman
    }
  }

  Future<void> _toggleActiveStatus(
    WidgetRef ref,
    PengumumanModel pengumuman,
  ) async {
    try {
      final newStatus = !pengumuman.isActive;
      await FirebaseFirestore.instance
          .collection('pengumuman')
          .doc(pengumuman.id)
          .update({'isActive': newStatus});

      // Send notification if becoming active
      if (newStatus) {
        await _sendPengumumanNotification(pengumuman);
      }
    } catch (e) {
      // Error toggling active status
    }
  }

  Future<void> _duplicatePengumuman(
    WidgetRef ref,
    PengumumanModel pengumuman,
  ) async {
    final newPengumuman = Pengumuman(
      id: '',
      judul: '${pengumuman.judul} (Copy)',
      konten: pengumuman.konten,
      kategori: pengumuman.kategori,
      prioritas: pengumuman.prioritas,
      targetAudience: pengumuman.targetAudience,
      tanggalPost: DateTime.now(),
      tanggalExpired: pengumuman.tanggalExpired,
      isActive: false, // Start as draft
      authorId: pengumuman.authorId,
      authorName: pengumuman.authorName,
      viewCount: 0,
      attachments: pengumuman.attachments,
    );

    await _addPengumuman(ref, newPengumuman);
  }

  Future<void> _deletePengumuman(
    BuildContext context,
    WidgetRef ref,
    PengumumanModel pengumuman,
  ) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Hapus Pengumuman'),
        content: Text(
          'Apakah Anda yakin ingin menghapus pengumuman "${pengumuman.judul}"?',
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context, false),
            child: const Text('Batal'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.pop(context, true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.red),
            child: const Text('Hapus', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        await FirebaseFirestore.instance
            .collection('pengumuman')
            .doc(pengumuman.id)
            .delete();
      } catch (e) {
        // Error deleting pengumuman
      }
    }
  }

  Future<void> _resendNotification(PengumumanModel pengumuman) async {
    try {
      await _sendPengumumanNotification(pengumuman);
    } catch (e) {
      // Error resending notification
    }
  }

  Future<void> _sendPengumumanNotification(PengumumanModel pengumuman) async {
    try {
      if (pengumuman.targetAudience.contains('semua') ||
          pengumuman.targetAudience.contains('santri')) {
        await MessagingHelper.sendPengumumanToSantri(
          title: pengumuman.judul,
          message: pengumuman.konten,
        );
      }

      if (pengumuman.targetAudience.contains('semua') ||
          pengumuman.targetAudience.contains('dewan_guru')) {
        await MessagingHelper.sendPengumumanToDevanGuru(
          title: pengumuman.judul,
          message: pengumuman.konten,
        );
      }
    } catch (e) {
      // Error sending pengumuman notification
    }
  }
}

/// Dialog form untuk menambah/edit pengumuman
class _PengumumanFormDialog extends StatefulWidget {
  final Pengumuman? pengumuman;
  final Function(Pengumuman) onSave;

  const _PengumumanFormDialog({this.pengumuman, required this.onSave});

  @override
  State<_PengumumanFormDialog> createState() => _PengumumanFormDialogState();
}

class _PengumumanFormDialogState extends State<_PengumumanFormDialog> {
  final _formKey = GlobalKey<FormState>();
  final _judulController = TextEditingController();
  final _kontenController = TextEditingController();

  String _selectedKategori = 'pengumuman';
  String _selectedPrioritas = 'normal';
  List<String> _selectedAudience = ['semua'];
  bool _isActive = true;
  DateTime? _tanggalExpired;

  final List<String> _kategoriOptions = [
    'pengumuman',
    'acara',
    'peraturan',
    'akademik',
    'umum',
  ];
  final List<String> _prioritasOptions = ['normal', 'penting', 'urgent'];
  final List<String> _audienceOptions = [
    'semua',
    'santri',
    'dewan_guru',
    'admin',
  ];

  @override
  void initState() {
    super.initState();

    if (widget.pengumuman != null) {
      _judulController.text = widget.pengumuman!.judul;
      _kontenController.text = widget.pengumuman!.konten;
      _selectedKategori = widget.pengumuman!.kategori;
      _selectedPrioritas = widget.pengumuman!.prioritas;
      _selectedAudience = List.from(widget.pengumuman!.targetAudience);
      _isActive = widget.pengumuman!.isActive;
      _tanggalExpired = widget.pengumuman!.tanggalExpired;
    }
  }

  @override
  void dispose() {
    _judulController.dispose();
    _kontenController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return AlertDialog(
      title: Text(
        widget.pengumuman == null ? 'Buat Pengumuman' : 'Edit Pengumuman',
      ),
      content: SizedBox(
        width: MediaQuery.of(context).size.width * 0.9,
        height: MediaQuery.of(context).size.height * 0.7,
        child: Form(
          key: _formKey,
          child: SingleChildScrollView(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                TextFormField(
                  controller: _judulController,
                  decoration: const InputDecoration(
                    labelText: 'Judul Pengumuman',
                    border: OutlineInputBorder(),
                  ),
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Judul tidak boleh kosong';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                TextFormField(
                  controller: _kontenController,
                  decoration: const InputDecoration(
                    labelText: 'Konten Pengumuman',
                    border: OutlineInputBorder(),
                    alignLabelWithHint: true,
                  ),
                  maxLines: 5,
                  validator: (value) {
                    if (value == null || value.trim().isEmpty) {
                      return 'Konten tidak boleh kosong';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 16),

                Row(
                  children: [
                    Expanded(
                      child: DropdownButtonFormField<String>(
                        value: _selectedKategori,
                        decoration: const InputDecoration(
                          labelText: 'Kategori',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 8,
                          ),
                        ),
                        isExpanded: true,
                        items: _kategoriOptions.map((kategori) {
                          return DropdownMenuItem(
                            value: kategori,
                            child: Text(
                              kategori.toUpperCase(),
                              overflow: TextOverflow.ellipsis,
                              style: const TextStyle(fontSize: 14),
                            ),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedKategori = value!;
                          });
                        },
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: DropdownButtonFormField<String>(
                        value: _selectedPrioritas,
                        decoration: const InputDecoration(
                          labelText: 'Prioritas',
                          border: OutlineInputBorder(),
                          contentPadding: EdgeInsets.symmetric(
                            horizontal: 12,
                            vertical: 8,
                          ),
                        ),
                        isExpanded: true,
                        items: _prioritasOptions.map((prioritas) {
                          return DropdownMenuItem(
                            value: prioritas,
                            child: Text(
                              prioritas.toUpperCase(),
                              overflow: TextOverflow.ellipsis,
                              style: const TextStyle(fontSize: 14),
                            ),
                          );
                        }).toList(),
                        onChanged: (value) {
                          setState(() {
                            _selectedPrioritas = value!;
                          });
                        },
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),

                const Text(
                  'Target Audience:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                Wrap(
                  spacing: 8,
                  children: _audienceOptions.map((audience) {
                    return FilterChip(
                      label: Text(audience.replaceAll('_', ' ').toUpperCase()),
                      selected: _selectedAudience.contains(audience),
                      onSelected: (selected) {
                        setState(() {
                          if (audience == 'semua') {
                            if (selected) {
                              _selectedAudience = ['semua'];
                            } else {
                              _selectedAudience.remove('semua');
                            }
                          } else {
                            _selectedAudience.remove('semua');
                            if (selected) {
                              _selectedAudience.add(audience);
                            } else {
                              _selectedAudience.remove(audience);
                            }
                            if (_selectedAudience.isEmpty) {
                              _selectedAudience = ['semua'];
                            }
                          }
                        });
                      },
                    );
                  }).toList(),
                ),
                const SizedBox(height: 16),

                Row(
                  children: [
                    Expanded(
                      child: InkWell(
                        onTap: () async {
                          final date = await showDatePicker(
                            context: context,
                            initialDate:
                                _tanggalExpired ??
                                DateTime.now().add(const Duration(days: 30)),
                            firstDate: DateTime.now(),
                            lastDate: DateTime.now().add(
                              const Duration(days: 365),
                            ),
                          );
                          if (date != null) {
                            setState(() {
                              _tanggalExpired = date;
                            });
                          }
                        },
                        child: InputDecorator(
                          decoration: const InputDecoration(
                            labelText: 'Tanggal Berakhir (Opsional)',
                            border: OutlineInputBorder(),
                          ),
                          child: Text(
                            _tanggalExpired != null
                                ? '${_tanggalExpired!.day}/${_tanggalExpired!.month}/${_tanggalExpired!.year}'
                                : 'Pilih tanggal',
                          ),
                        ),
                      ),
                    ),
                    if (_tanggalExpired != null)
                      IconButton(
                        onPressed: () {
                          setState(() {
                            _tanggalExpired = null;
                          });
                        },
                        icon: const Icon(Icons.clear),
                      ),
                  ],
                ),
                const SizedBox(height: 16),

                Row(
                  children: [
                    const Text('Aktifkan Langsung:'),
                    const Spacer(),
                    Switch(
                      value: _isActive,
                      onChanged: (value) {
                        setState(() {
                          _isActive = value;
                        });
                      },
                    ),
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
      actions: [
        TextButton(
          onPressed: () => Navigator.pop(context),
          child: const Text('Batal'),
        ),
        ElevatedButton(
          onPressed: _savePengumuman,
          style: ElevatedButton.styleFrom(
            backgroundColor: AppTheme.primaryColor,
            foregroundColor: Colors.white,
          ),
          child: Text(widget.pengumuman == null ? 'Buat' : 'Simpan'),
        ),
      ],
    );
  }

  void _savePengumuman() {
    if (!_formKey.currentState!.validate()) return;
    if (_selectedAudience.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('Pilih minimal satu target audience')),
      );
      return;
    }

    final pengumuman = Pengumuman(
      id: widget.pengumuman?.id ?? '',
      judul: _judulController.text.trim(),
      konten: _kontenController.text.trim(),
      kategori: _selectedKategori,
      prioritas: _selectedPrioritas,
      targetAudience: _selectedAudience,
      tanggalPost: widget.pengumuman?.tanggalPost ?? DateTime.now(),
      tanggalExpired: _tanggalExpired,
      isActive: _isActive,
      authorId:
          widget.pengumuman?.authorId ??
          'current_admin_id', // TODO: Get from auth
      authorName:
          widget.pengumuman?.authorName ?? 'Admin', // TODO: Get from auth
      viewCount: widget.pengumuman?.viewCount ?? 0,
      attachments: widget.pengumuman?.attachments ?? [],
    );

    widget.onSave(pengumuman);
    Navigator.pop(context);
  }
}
