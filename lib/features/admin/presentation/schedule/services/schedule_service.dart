import 'package:cloud_firestore/cloud_firestore.dart';
import '../models/jadwal_kegiatan_model.dart';

/// Service untuk CRUD operations jadwal kegiatan
class ScheduleService {
  final FirebaseFirestore _firestore;

  ScheduleService({FirebaseFirestore? firestore})
    : _firestore = firestore ?? FirebaseFirestore.instance;

  /// Tambah jadwal baru
  Future<String> addJadwal(JadwalKegiatan jadwal) async {
    try {
      final docRef = await _firestore.collection('jadwal').add(jadwal.toJson());

      _showSuccess('Jadwal berhasil ditambahkan');
      return docRef.id;
    } catch (e) {
      _showError('Gagal menambahkan jadwal: $e');
      rethrow;
    }
  }

  /// Update jadwal
  Future<void> updateJadwal(JadwalKegiatan jadwal) async {
    try {
      await _firestore
          .collection('jadwal')
          .doc(jadwal.id)
          .update(jadwal.toJson());

      _showSuccess('Jadwal berhasil diupdate');
    } catch (e) {
      _showError('Gagal mengupdate jadwal: $e');
      rethrow;
    }
  }

  /// Hapus jadwal (soft delete)
  Future<void> deleteJadwal(String id) async {
    try {
      await _firestore.collection('jadwal').doc(id).update({
        'isAktif': false,
        'deletedAt': DateTime.now().millisecondsSinceEpoch,
      });

      _showSuccess('Jadwal berhasil dihapus');
    } catch (e) {
      _showError('Gagal menghapus jadwal: $e');
      rethrow;
    }
  }

  /// Toggle status aktif jadwal
  Future<void> toggleJadwalStatus(String id, bool currentStatus) async {
    try {
      await _firestore.collection('jadwal').doc(id).update({
        'isAktif': !currentStatus,
      });

      final status = !currentStatus ? 'diaktifkan' : 'dinonaktifkan';
      _showSuccess('Jadwal berhasil $status');
    } catch (e) {
      _showError('Gagal mengubah status jadwal: $e');
      rethrow;
    }
  }

  /// Duplicate jadwal dengan tanggal baru
  Future<String> duplicateJadwal(
    JadwalKegiatan originalJadwal,
    DateTime newDate,
  ) async {
    try {
      final duplicatedJadwal = JadwalKegiatan(
        id: '', // Will be generated by Firestore
        nama: '${originalJadwal.nama} (Copy)',
        deskripsi: originalJadwal.deskripsi,
        tanggal: newDate,
        waktuMulai: originalJadwal.waktuMulai,
        waktuSelesai: originalJadwal.waktuSelesai,
        tempat: originalJadwal.tempat,
        kategori: originalJadwal.kategori,
        materiId: originalJadwal.materiId,
        materiNama: originalJadwal.materiNama,
        surah: originalJadwal.surah,
        ayatMulai: originalJadwal.ayatMulai,
        ayatSelesai: originalJadwal.ayatSelesai,
        halamanMulai: originalJadwal.halamanMulai,
        halamanSelesai: originalJadwal.halamanSelesai,
        catatan: originalJadwal.catatan,
        isAktif: true,
        createdAt: DateTime.now(),
      );

      return await addJadwal(duplicatedJadwal);
    } catch (e) {
      _showError('Gagal menduplikasi jadwal: $e');
      rethrow;
    }
  }

  /// Get jadwal berdasarkan tanggal range
  Future<List<JadwalKegiatan>> getJadwalByDateRange(
    DateTime startDate,
    DateTime endDate,
  ) async {
    try {
      final snapshot = await _firestore
          .collection('jadwal')
          .where(
            'tanggal',
            isGreaterThanOrEqualTo: startDate.millisecondsSinceEpoch,
          )
          .where('tanggal', isLessThanOrEqualTo: endDate.millisecondsSinceEpoch)
          .where('isAktif', isEqualTo: true)
          .orderBy('tanggal')
          .orderBy('waktuMulai')
          .get();

      return snapshot.docs
          .map((doc) => JadwalKegiatan.fromJson(doc.id, doc.data()))
          .toList();
    } catch (e) {
      _showError('Gagal mengambil jadwal: $e');
      return [];
    }
  }

  /// Helper methods untuk menampilkan pesan
  void _showError(String message) {
    // TODO: Implement proper error handling
    print('Error: $message');
  }

  void _showSuccess(String message) {
    // TODO: Implement proper success handling
    print('Success: $message');
  }
}
